#!/bin/bash
# Limoji 1.0.0

readonly VERSION="1.0.0"

parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" || exit ; pwd -P )

cd "$parent_path" || exit

# A few values so the script can run in color
COL_NC='\e[0m' # No Color
COL_LIGHT_RED='\e[1;31m'
COL_LIGHT_GREEN='\e[1;32m'
COL_LIGHT_BLUE='\e[1;94m'
COL_LIGHT_YELLOW='\e[1;93m'
TICK="${COL_NC}[${COL_LIGHT_GREEN}✓${COL_NC}]"
CROSS="${COL_NC}[${COL_LIGHT_RED}✗${COL_NC}]"
INFO="${COL_NC}[${COL_LIGHT_YELLOW}i${COL_NC}]"
QUESTION="${COL_NC}[${COL_LIGHT_BLUE}?${COL_NC}]"

# A function that copies the selected emoticon to the clipboard
# Works on both X11 and Wayland
copyToClipboard() {
    if [ "$XDG_SESSION_TYPE" == "x11" ]; then
        xclip -selection c
    else
        wl-copy
    fi
}

# A function that prints the selected emoticon to the console
printEmoticon() {
    printf "%b %b$1 was copied to the clipboard successfully:%b\n" "${TICK}" "${COL_LIGHT_GREEN}" "${COL_NC}"
    printf "%b" "${!1}" | tee >(copyToClipboard)
    printf "\n"
}

# Function that picks a random emoticon name
fetchRandomName() {
    # Generate a random number between 1 and ascii line count
    randomLine=$(( 2 + RANDOM % (ASCII_LINES - 1) ))

    # Fetch emoticon's name from the selected line
    randomName=$(sed "${randomLine}q;d" ascii | cut -d= -f1)
}

randomEmoticon() {
    # Picks a random emoticon name
    fetchRandomName

    # Print the emoticon and copy it to the clipboard
    printEmoticon "$randomName"

    # Ask the user if he wants another emoticon
    printf "%b Do you want another one? (y/n) " "${QUESTION}"
    read -n 1 -r
    printf "\n"
}

# Function that creates a list of the available emoticons
listEmoticons() {
    # Repeat for every single line
    for (( c=2; c<=ASCII_LINES; c++ ))
    do
        # Read emoticon's name
        name=$(sed "${c}q;d" ascii | cut -d= -f1)

        # Print the name followed by the emoticon itself
        printf "%b:\n%b\n\n" "$name" "${!name}"
    done
}

# Prints an error message on invalid input
invalidArgument() {
    printf "%b %bInvalid argument!%b\n" "${CROSS}" "${COL_LIGHT_RED}" "${COL_NC}"
    printf "Try 'limoji --help' for a list of available commands.\n"
}

# Fetch all emoticons from the file
source ascii

# Store the number of emoticons in a variable
ASCII_LINES=$(wc -l < ascii)

# Check if current session is X11
if [ "$XDG_SESSION_TYPE" == "x11" ]; then
    # Verify xclip has been installed
    if ! hash xclip 2> /dev/null; then
        printf "%b X11 detected\n" "${INFO}"
        printf "%b %bxclip is required for copying text to the clipboard%b\n" "${CROSS}" "${COL_LIGHT_RED}" "${COL_NC}"
        exit 2
    fi
# Otherwise, check if it is Wayland
elif [ "$XDG_SESSION_TYPE" == "wayland" ]; then
    # Verify wl-clipboard has been installed
    if ! hash wl-copy 2> /dev/null; then
        printf "%b Wayland detected\n" "${INFO}"
        printf "%b %bwl-clipboard is required for copying text to the clipboard%b\n" "${CROSS}" "${COL_LIGHT_RED}" "${COL_NC}"
        exit 2
    fi
# Anything else is unsupported
else
    printf "%b %bYour system is not supported yet, please create an issue here:%b\n" "${CROSS}" "${COL_LIGHT_RED}" "${COL_NC}"
    printf "    https://github.com/GEROGIANNIS/Limoji/issues/new/choose\n"
    exit 1
fi

# Detect number of arguments
if [ $# == 1 ]; then
    if [ "$1" == --emoticons ] || [ "$1" == -e ]; then
        listEmoticons
    elif [ "$1" == --help ] || [ "$1" == -h ]; then
        printf "Usage: limoji <emoticon>\n  -e, --emoticons Show a list of the available emoticons\n  -h, --help      Show this list\n  -i, --info      Show info about the project\n  -r, --random    Print a random emoticon\n  -v, --version   Display Limoji's version\n\nFor more information you can visit our GitHub repository: https://github.com/GEROGIANNIS/Limoji\n"
    elif [ "$1" == --info ] || [ "$1" == -i ]; then
        printf "%b Limoji is an open source tool that makes it easy to choose between hundreds of cool ASCII emoticons and share them with your friends, all done using the terminal!\n    All you have to do is pick the right one or let Limoji choose it for you!\n" "${INFO}"
    elif [ "$1" == --random ] || [ "$1" == -r ]; then
        # Picks a random emoticon
        randomEmoticon

        # If the user replies with a 'Yes', repick one
        while [[ $REPLY =~ ^[Yy]$ ]]; do
            randomEmoticon
        done
    elif [ "$1" == --version ] || [ "$1" == -v ]; then
        printf "Limoji %b\n" "${VERSION}"
    # If input contains only alphanumeric characters
    elif [[ "$1" =~ ^[[:alnum:]]+$ ]]; then
        # Convert all uppercase characters to lowercase
        set "$(printf "%b" "$1" | tr '[:upper:]' '[:lower:]')"

        # Check if the selected emoticon exists
        if ! test -z "${!1}"; then
            printEmoticon "$1"
        else
            printf "%b %bThe specified emoji doesn't exist!%b\n" "${CROSS}" "${COL_LIGHT_RED}" "${COL_NC}"
            printf "Try 'limoji --emoticons' for a list of available emojis.\n"
        fi
    else
        invalidArgument
    fi
else
    invalidArgument
fi
