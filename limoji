#!/bin/bash
# Limoji 1.0.0

limoji_version="1.0.0"
readonly limoji_version

printCross() {
    printf -- '[\e[1;31m✗\e[0m] \e[1;31m%b\e[0m\n' "${*}" >&2
}

# A function that prints the selected emoticon to the console
printEmoticon() {
    printTick "${1}"
    printf -- '%b' "${!1}" | tee >(copyToClipboard)
    printf -- '%s\n' ""
}

printInfo() {
    printf -- '[\e[1;93mi\e[0m] %b' "${*}"
}

printQuestion() {
    printf -- '\e[0m[\e[1;94m?\e[0m] %b' "${*}"
}

printTick() {
    printf -- '[\e[1;32m✓\e[0m] \e[1;32m%b\e[0m\n' "${*}"
}

printCmdHelp() {
cat << EOF
Usage: limoji <emoticon>
  -e, --emoticons Show a list of the available emoticons
  -h, --help      Show this list
  -i, --info      Show info about the project
  -r, --random    Print a random emoticon
  -v, --version   Display Limoji's version
  
For more information you can visit our GitHub repository:
https://github.com/GEROGIANNIS/Limoji

EOF
}

printCmdInfo() {
    local lightYellow colorReset
    colorReset='\e[0m'
    lightYellow='\e[1;93m'
    printf -- '%b\n' \
    "${colorReset}[${lightYellow}i${colorReset}] Limoji is an open source tool that makes it easy to choose between
    hundreds of cool ASCII emoticons and share them with your friends,
    all done using the terminal!

    All you have to do is pick the right one or let Limoji choose it for you!

    "
}

printCmdVersion() {
    printf -- 'Limoji %b\n' "${limoji_version}"
}

# Function that picks a random emoticon name
fetchRandomName() {
    # Generate a random number between 1 and ascii line count
    randomLine=$(( 2 + RANDOM % (ASCII_LINES - 1) ))

    # Fetch emoticon's name from the selected line
    randomName=$(sed "${randomLine}q;d" ascii | cut -d= -f1)
}

randomEmoticon() {
    local answer
    answer="y"
    # Until the user replies with a 'y', cycle through random emoticons
    # If the user replies with 'Y', it will be lowercased (i.e. ${var,,}) for the test
    until [[ "${answer,,}" != y ]]; do
        # Picks a random emoticon name
        fetchRandomName

        # Print the emoticon and copy it to the clipboard
        printEmoticon "${randomName}"

        # Ask the user if he wants another emoticon
        read -n 1 -r -p "$(printQuestion "Do you want another one? (y/n) ")" answer
        printf -- '%s\n' ""
    done
}

# Function that creates a list of the available emoticons
listEmoticons() {
    # Repeat for every single line
    for (( c=2; c<=ASCII_LINES; c++ )); do
        # Read emoticon's name
        name=$(sed "${c}q;d" ascii | cut -d= -f1)

        # Print the name followed by the emoticon itself
        printf -- '%b:\n%b\n\n' "${name}" "${!name}"
    done
}

# Prints an error message on invalid input
invalidArgument() {
    printCross "Invalid argument!"
    printf -- '%s\n' "Try 'limoji --help' for a list of available commands." >&2
}

# Attempt to figure out a clipboard handling method
setupClipboard() {
    # If x11 and xclip are simultaneously present, that's a preferred option
    if [[ "${XDG_SESSION_TYPE}" = "x11" ]] && command -v xclip >/dev/null 2>&1; then
        copyToClipboard() { xclip -selection c; }
        return 0
    fi

    # if wayland and wl-copy are simultaneously present, that's a preferred option
    if [[ "${XDG_SESSION_TYPE}" = "wayland" ]] && command -v wl-copy >/dev/null 2>&1; then
        copyToClipboard() { wl-copy; }
        return 0
    fi

    # If we get to this point, then it only means that XDG_SESSION_TYPE isn't set
    # We can run some more thorough heuristics to try and find a way to clipboard things
    if command -v wl-copy >/dev/null 2>&1; then
        copyToClipboard() { wl-copy; }
        return 0
    elif command -v xclip >/dev/null 2>&1; then
        copyToClipboard() { xclip -selection c; }
        return 0
    elif command -v xsel >/dev/null 2>&1; then
        copyToClipboard() { xsel --clipboard --input; }
        return 0
    elif command -v pbcopy >/dev/null 2>&1; then
        copyToClipboard() { pbcopy; }
        return 0
    else
        printCross "Your system is not supported yet, please create a new issue here:"
        printf -- '%s\n' "https://github.com/GEROGIANNIS/Limoji/issues/new/choose" >&2
        exit 1
    fi
}

main() {
    # Fail fast checks.
    # First, if no args are given, give the invalid argument message and exit
    (( ${#} == 0 )) && { invalidArgument; exit 1; }
    # Next, try to get a clipboard working
    setupClipboard

    # Fetch all emoticons from the file
    source ascii

    # Store the number of emoticons in a variable
    ASCII_LINES=$(wc -l < ascii)

    case "${1}" in
        (--emoticons|-e)    listEmoticons ;;
        (--help|-h)         printCmdHelp ;;
        (--info|-i)         printCmdInfo ;;
        (--random|-r)       randomEmoticon ;;
        (--version|-v)      printCmdVersion ;;
        (*)
            # Convert all uppercase characters to lowercase
            set -- "${1,,}"

            # Check if the selected emoticon exists
            if [[ -n "${!1}" ]]; then
                printEmoticon "${1}"
            else
                printCross "The specified emoji doesn't exist!"
                printf -- '%s\n' "Try 'limoji --emoticons' for a list of available emojis."
            fi
        ;;
    esac
}

parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" || exit ; pwd -P )

cd "${parent_path}" || exit

main "${@}"
